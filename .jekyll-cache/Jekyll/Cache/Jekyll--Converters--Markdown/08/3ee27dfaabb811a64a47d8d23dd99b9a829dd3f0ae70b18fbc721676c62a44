I"T
<ul id="markdown-toc">
  <li><a href="#라우터-분리하기" id="markdown-toc-라우터-분리하기">라우터 분리하기</a>    <ul>
      <li><a href="#라우터-분리의-필요성" id="markdown-toc-라우터-분리의-필요성">라우터 분리의 필요성</a></li>
      <li><a href="#애플리케이션-레벨의-미들웨어" id="markdown-toc-애플리케이션-레벨의-미들웨어">애플리케이션 레벨의 미들웨어</a></li>
      <li><a href="#라우터-레벨의-미들웨어" id="markdown-toc-라우터-레벨의-미들웨어">라우터 레벨의 미들웨어</a>        <ul>
          <li><a href="#기본적인-원리파일로-분할하기-전" id="markdown-toc-기본적인-원리파일로-분할하기-전">기본적인 원리(파일로 분할하기 전)</a></li>
          <li><a href="#라우터를-파일로-분할하기" id="markdown-toc-라우터를-파일로-분할하기">라우터를 파일로 분할하기</a></li>
          <li><a href="#확장" id="markdown-toc-확장">확장</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="라우터-분리하기">라우터 분리하기</h1>
<p>자세한 내용은 <a href="https://opentutorials.org/course/2136/12445">생활코딩 Javascript(nodejs)</a>
강좌와 <a href="http://expressjs.com/ko/guide/using-middleware.html">Express - Using middleware</a>를 참고하세요.</p>

<h2 id="라우터-분리의-필요성">라우터 분리의 필요성</h2>
<p>라우팅 작업이 늘어남에 따라서 아래와 같이 라우팅을 <strong>애플리케이션 레벨의 미들웨어</strong> 로서 관리하기에는
어려움이 생길 수 있습니다. 이에 따라 <strong>서로 연관되어 있는 라우터끼리 쪼개서 파일로 분가</strong> 시킬
필요가 있습니다.</p>

<h2 id="애플리케이션-레벨의-미들웨어">애플리케이션 레벨의 미들웨어</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p1/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r1</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p1/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r2</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p2/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p2/r1</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p2/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p2/r2</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
</code></pre></div></div>

<h2 id="라우터-레벨의-미들웨어">라우터 레벨의 미들웨어</h2>

<h3 id="기본적인-원리파일로-분할하기-전">기본적인 원리(파일로 분할하기 전)</h3>

<p>p1으로 들어오는 모든 요청은 라우터에 위임하므로 아래와 같이
인자 값을 <strong><code class="language-plaintext highlighter-rouge">'/p1/r1'</code></strong> 에서 <strong><code class="language-plaintext highlighter-rouge">'/r1'</code></strong> 로 간략화할 수 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="nx">p1</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r1</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">p1</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r2</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p1</span><span class="dl">'</span><span class="p">,</span> <span class="nx">p1</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="nx">p2</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p2/r1</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">p2</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p2/r2</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p2</span><span class="dl">'</span><span class="p">,</span> <span class="nx">p2</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connected</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
</code></pre></div></div>

<p>위와 같은 코드는 언뜻 보기에도 이전보다 단순해지지 않았음을 알 수 있습니다.
이것의 효용은 라우터를 파일로 분할함으로써 나타납니다.</p>

<h3 id="라우터를-파일로-분할하기">라우터를 파일로 분할하기</h3>

<p>라우터를 모듈로 만들어 줍니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/p1.js</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p1</span><span class="dl">'</span><span class="p">,</span> <span class="nx">p1</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/p2.js</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p2</span><span class="dl">'</span><span class="p">,</span> <span class="nx">p2</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connected</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//./routes/p1.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r1</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r2</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//./routes/p2.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p2/r1</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
	<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p2/r2</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="확장">확장</h3>

<p>위의 코드에서 <strong><code class="language-plaintext highlighter-rouge">p1.js</code></strong> 와 <strong><code class="language-plaintext highlighter-rouge">p2.js</code></strong> 는 완전히 고립되어 있습니다.
물론 고립되어 있다는 것은 어떤 문제 발생의 여지를 줄여주기도 하지만
<strong><code class="language-plaintext highlighter-rouge">app.js</code></strong> 에서 생성된 데이터는 사용하지 못한다는 단점이 있습니다.</p>

<p>이는 아래와 같이 <strong><code class="language-plaintext highlighter-rouge">require</code></strong>에서 <strong><code class="language-plaintext highlighter-rouge">app</code></strong>이란 객체를 전달함으로써 해결 할 수 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//app.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/p1.js</span><span class="dl">'</span><span class="p">)(</span><span class="nx">app</span><span class="p">);</span> <span class="c1">//객체 app을 전달</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p1</span><span class="dl">'</span><span class="p">,</span> <span class="nx">p1</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">p2</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./routes/p2.js</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/p2</span><span class="dl">'</span><span class="p">,</span> <span class="nx">p2</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">connected</span><span class="dl">'</span><span class="p">);</span>		
<span class="p">});</span>
</code></pre></div></div>

<p>함수로 만들어져 객체 <strong><code class="language-plaintext highlighter-rouge">app</code></strong> 을 전달받고 <strong>라우터를 리턴</strong>합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//./routes/p1.js</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">app</span><span class="p">){</span><span class="c1">//함수로 만들어 객체 app을 전달받음</span>
	<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
	<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">();</span>
	<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r1</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r1</span><span class="dl">'</span><span class="p">);</span>		
	<span class="p">});</span>

	<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/r2</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello /p1/r2</span><span class="dl">'</span><span class="p">);</span>		
	<span class="p">});</span>
	<span class="k">return</span> <span class="nx">router</span><span class="p">;</span>	<span class="c1">//라우터를 리턴</span>
<span class="p">};</span>
</code></pre></div></div>
:ET